!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	Session.vim	/^normal! 0$/;"	m
019|	Session.vim	/^normal! 019|$/;"	m
041|	Session.vim	/^normal! 041|$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
Core	Core.cpp	/^Core::Core(): midterm(0), final(0) { };$/;"	f	class:Core
Core	Core.cpp	/^Core::Core(istream& is) $/;"	f	class:Core
Core	Core.h	/^class Core {$/;"	c
CountHomework	Core.h	/^    virtual void CountHomework() { ++homeworkcount_; }$/;"	f	class:Core
GUARD_Core_h	Core.h	2;"	d
GUARD_Grad_h	Grad.h	2;"	d
GUARD_Student_info_h	Student_info.h	2;"	d
GUARD_grade_h	grade.h	2;"	d
Grad	Grad.cpp	/^Grad::Grad(std::istream& is)$/;"	f	class:Grad
Grad	Grad.h	/^    Grad(): thesis(0) { };$/;"	f	class:Grad
Grad	Grad.h	/^class Grad: public Core {$/;"	c
IsMissingHomework	Core.cpp	/^bool Core::IsMissingHomework() const$/;"	f	class:Core
IsMissingHomework	Student_info.h	/^bool IsMissingHomework() const { return cp->IsMissingHomework(); }$/;"	f	class:Student_info
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
Student_info	Student_info.cpp	/^Student_info::Student_info(const Student_info& s): cp(0) {$/;"	f	class:Student_info
Student_info	Student_info.h	/^Student_info(): cp(0) { }$/;"	f	class:Student_info
Student_info	Student_info.h	/^Student_info(std::istream& is): cp(0) { read(is); }$/;"	f	class:Student_info
Student_info	Student_info.h	/^class Student_info {$/;"	c
clone	Core.h	/^    virtual Core* clone() const { return new Core(*this); }$/;"	f	class:Core
clone	Grad.h	/^    Grad* clone() const { return new Grad(*this); }$/;"	f	class:Grad
compare	Student_info.h	/^static bool compare(const Student_info* s1, const Student_info* s2) {$/;"	f	class:Student_info
cp	Student_info.h	/^    Core* cp;$/;"	m	class:Student_info
final	Core.h	/^    double midterm, final;$/;"	m	class:Core
grade	Core.cpp	/^double Core::grade() const {$/;"	f	class:Core
grade	Grad.cpp	/^double Grad::grade() const {$/;"	f	class:Grad
grade	Student_info.h	/^double grade() const {$/;"	f	class:Student_info
grade	grade.cpp	/^double grade(double midterm, double final, const vector<double>& hw) {$/;"	f
grade	grade.cpp	/^double grade(double midterm, double final, double homework) {$/;"	f
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
homework	Core.h	/^    std::vector<double> homework;$/;"	m	class:Core
homeworkcount_	Core.h	/^    int homeworkcount_;$/;"	m	class:Core
main	computegrade.cpp	/^int main() {$/;"	f
median	grade.h	/^T median(std::vector<T> vec) {$/;"	f
midterm	Core.h	/^    double midterm, final;$/;"	m	class:Core
n_	Core.h	/^    std::string n_;$/;"	m	class:Core
name	Core.cpp	/^string Core::name() const { return n_; }$/;"	f	class:Core
name	Student_info.h	/^std::string name() const {$/;"	f	class:Student_info
operator =	Student_info.cpp	/^Student_info& Student_info::operator=(const Student_info& rhs) {$/;"	f	class:Student_info
program_CXX_OBJS	makefile	/^program_CXX_OBJS := ${program_CXX_SRCS:.cpp=.o}$/;"	m
program_CXX_SRCS	makefile	/^program_CXX_SRCS := $(wildcard *.cpp)$/;"	m
program_C_OBJS	makefile	/^program_C_OBJS := ${program_C_SRCS:.c=.o}$/;"	m
program_C_SRCS	makefile	/^program_C_SRCS := $(wildcard *.c)$/;"	m
program_INCLUDE_DIRS	makefile	/^program_INCLUDE_DIRS :=$/;"	m
program_LIBRARIES	makefile	/^program_LIBRARIES :=$/;"	m
program_LIBRARY_DIRS	makefile	/^program_LIBRARY_DIRS :=$/;"	m
program_NAME	makefile	/^program_NAME := cg.exe$/;"	m
program_OBJS	makefile	/^program_OBJS := $(program_C_OBJS) $(program_CXX_OBJS)$/;"	m
program_TAGS	makefile	/^program_TAGS := tags$/;"	m
read	Core.cpp	/^istream& Core::read(istream& in) {$/;"	f	class:Core
read	Grad.cpp	/^istream& Grad::read(istream& in) {$/;"	f	class:Grad
read	Student_info.cpp	/^istream& Student_info::read(istream& is) {$/;"	f	class:Student_info
read_common	Core.cpp	/^istream& Core::read_common(istream& in) {$/;"	f	class:Core
read_hw	Core.cpp	/^istream& Core::read_hw(istream& in, vector<double>& hw) {$/;"	f	class:Core
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 1 - ((0 * winheight(0) + 29) \/ 59)$/;"	v
s:l	Session.vim	/^let s:l = 10 - ((9 * winheight(0) + 29) \/ 59)$/;"	v
s:l	Session.vim	/^let s:l = 3 - ((2 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 5 - ((4 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 6 - ((5 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 8 - ((7 * winheight(0) + 29) \/ 58)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
thesis	Grad.h	/^    double thesis;$/;"	m	class:Grad
zt	Session.vim	/^normal! zt$/;"	m
~Core	Core.h	/^    virtual ~Core() { }$/;"	f	class:Core
~Student_info	Student_info.h	/^~Student_info() { delete cp; }$/;"	f	class:Student_info
