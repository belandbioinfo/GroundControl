!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
0	Session.vim	/^normal! 0$/;"	m
012|	Session.vim	/^normal! 012|$/;"	m
024|	Session.vim	/^normal! 024|$/;"	m
<Plug>NetrwBrowseX	Session.vim	/^nnoremap <silent> <Plug>NetrwBrowseX :call netrw#BrowseX(expand((exists("g:netrw_gx")? g:netrw_gx : '<cfile>')),netrw#CheckIfRemote())$/;"	m
<Plug>NetrwBrowseXVis	Session.vim	/^vnoremap <silent> <Plug>NetrwBrowseXVis :call netrw#BrowseXVis()$/;"	m
GUARD_Student_info	Student_info.h	2;"	d
GUARD_analysis_h	analysis.h	2;"	d
GUARD_grade_h	grade.h	2;"	d
SessionLoad	Session.vim	/^let SessionLoad = 1$/;"	v
Student_info	Student_info.cpp	/^Student_info::Student_info(): midterm(0), final(0) { }$/;"	f	class:Student_info
Student_info	Student_info.cpp	/^Student_info::Student_info(istream& is) { Student_info::read(is); }$/;"	f	class:Student_info
Student_info	Student_info.h	/^class Student_info {$/;"	c
compare	Student_info.cpp	/^bool compare(const Student_info& x, const Student_info& y) {$/;"	f
final	Student_info.h	/^    double midterm, final;$/;"	m	class:Student_info
grade	Student_info.cpp	/^double Student_info::grade() const {$/;"	f	class:Student_info
grade	grade.cpp	/^double grade(double midterm, double final, const vector<double>& hw) {$/;"	f
grade	grade.cpp	/^double grade(double midterm, double final, double homework) {$/;"	f
gx	Session.vim	/^nmap gx <Plug>NetrwBrowseX$/;"	m
gx	Session.vim	/^vmap gx <Plug>NetrwBrowseXVis$/;"	m
homework	Student_info.h	/^    std::vector<double> homework;$/;"	m	class:Student_info
main	computegrade.cpp	/^int main() {$/;"	f
median	grade.h	/^T median(std::vector<T> vec) {$/;"	f
midterm	Student_info.h	/^    double midterm, final;$/;"	m	class:Student_info
n	Student_info.h	/^    std::string n;$/;"	m	class:Student_info
name	Student_info.h	/^    std::string name() const { return n; }$/;"	f	class:Student_info
read	Student_info.cpp	/^istream& Student_info::read(istream& in) {$/;"	f	class:Student_info
read_hw	Student_info.cpp	/^istream& read_hw(istream& in, vector<double>& hw) {$/;"	f
s:cpo_save	Session.vim	/^let s:cpo_save=&cpo$/;"	v
s:l	Session.vim	/^let s:l = 11 - ((10 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 18 - ((17 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 23 - ((22 * winheight(0) + 29) \/ 58)$/;"	v
s:l	Session.vim	/^let s:l = 4 - ((3 * winheight(0) + 28) \/ 57)$/;"	v
s:l	Session.vim	/^let s:l = 5 - ((4 * winheight(0) + 28) \/ 57)$/;"	v
s:so_save	Session.vim	/^let s:so_save = &so | let s:siso_save = &siso | set so=0 siso=0$/;"	v
s:sx	Session.vim	/^let s:sx = expand("<sfile>:p:r")."x.vim"$/;"	v
s:wipebuf	Session.vim	/^  let s:wipebuf = bufnr('%')$/;"	v
valid	Student_info.h	/^    bool valid() const { return !homework.empty(); }$/;"	f	class:Student_info
zt	Session.vim	/^normal! zt$/;"	m
