package euler_2;

import java.util.Arrays;
import java.util.LinkedList;
import java.util.List;

/* https://projecteuler.net/problem=2
 * Each new term in the Fibonacci sequence is generated by adding the previous two terms. 
 * By starting with 1 and 2, the first 10 terms will be:
 * 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
 * By considering the terms in the Fibonacci sequence whose values do not 
 * exceed four million, find the sum of the even-valued terms.
 * ANSWER:4613732
 * output:"Result of the summ of all even fibonacci terms within 4000000 = 4613732"
 */
public class MainMethod {
	private static int UPPERBOUND = 4000000;
	private static LinkedList<Integer> fib;
	private static List<Integer> evenFibs;
	private static int summedEvens = 0;

	public static void main(String[] args){
		fib = new Fibonacci(UPPERBOUND).getFibSequence();
		evenFibs = new getEven(fib).returnEven();
		for (int evens:evenFibs) {
			summedEvens+=evens;
		}
		System.out.printf("Result of the summ of all even fibonacci terms within %d = %d", UPPERBOUND,summedEvens);
	}
		
	public static void testFib(){
		// Test Fibonacci method by observing last ten values
		int[] printList = new int[10];
		fib = new Fibonacci(UPPERBOUND).getFibSequence();
		for (int x = 0; x < 10; x++){
			printList[x] = fib.pop();
		}
		System.out.printf("Last 10 terms within range are %s", Arrays.toString(printList));
	}
}
